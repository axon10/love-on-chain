{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dcc4519208e704fae442bdcde3d668ddbdad7eb715fb803598d813b67aa944464736f6c63430008170033","sourceMap":"521:3235:48:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:48;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dcc4519208e704fae442bdcde3d668ddbdad7eb715fb803598d813b67aa944464736f6c63430008170033","sourceMap":"521:3235:48:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/\",\":@murky/=lib/murky/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solady/=lib/solady/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0x0fe5062075b50bd13e38a5a399299aac3673f4b02a89e14f2bf3c382ee39f754\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27677c502fdf53d956d7c6974e45a3be600ef0c4c93fd9b75683ae99a03b1a15\",\"dweb:/ipfs/QmWPw6UxStZkkWRGuPBDaa5XSFPUN2JBCdNnCSyut567m9\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8\",\"dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd853cb000ab795f7e7840b64b12e45c80cc4cdfeaf4f08529bc760fb3a8a0754\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee1be571dadb5033254b160118fc1035ea2d3cdd4cfbae0da6d4030c2f416d40\",\"dweb:/ipfs/QmVfqZZUoGWfgZLEC1ZbSXHpW22XgrJqVHdSjZUDv51QBK\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512\",\"dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ERC721A/=lib/ERC721A/","@murky/=lib/murky/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@solady/=lib/solady/","ERC721A/=lib/ERC721A/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/murky/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solady/=lib/solady/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":"MessageHashUtils"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x0fe5062075b50bd13e38a5a399299aac3673f4b02a89e14f2bf3c382ee39f754","urls":["bzz-raw://27677c502fdf53d956d7c6974e45a3be600ef0c4c93fd9b75683ae99a03b1a15","dweb:/ipfs/QmWPw6UxStZkkWRGuPBDaa5XSFPUN2JBCdNnCSyut567m9"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","urls":["bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453","dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38","urls":["bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8","dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd853cb000ab795f7e7840b64b12e45c80cc4cdfeaf4f08529bc760fb3a8a0754","urls":["bzz-raw://ee1be571dadb5033254b160118fc1035ea2d3cdd4cfbae0da6d4030c2f416d40","dweb:/ipfs/QmVfqZZUoGWfgZLEC1ZbSXHpW22XgrJqVHdSjZUDv51QBK"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e","urls":["bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047","dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f","urls":["bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512","dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol","id":52643,"exportedSymbols":{"MessageHashUtils":[52642],"Strings":[52220]},"nodeType":"SourceUnit","src":"123:3634:48","nodes":[{"id":52570,"nodeType":"PragmaDirective","src":"123:24:48","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":52572,"nodeType":"ImportDirective","src":"149:39:48","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/Strings.sol","file":"../Strings.sol","nameLocation":"-1:-1:-1","scope":52643,"sourceUnit":52221,"symbolAliases":[{"foreign":{"id":52571,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52220,"src":"157:7:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":52642,"nodeType":"ContractDefinition","src":"521:3235:48","nodes":[{"id":52583,"nodeType":"FunctionDefinition","src":"1222:460:48","nodes":[],"body":{"id":52582,"nodeType":"Block","src":"1314:368:48","nodes":[],"statements":[{"AST":{"nativeSrc":"1376:300:48","nodeType":"YulBlock","src":"1376:300:48","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:4:48","nodeType":"YulLiteral","src":"1397:4:48","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1403:34:48","nodeType":"YulLiteral","src":"1403:34:48","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1390:6:48","nodeType":"YulIdentifier","src":"1390:6:48"},"nativeSrc":"1390:48:48","nodeType":"YulFunctionCall","src":"1390:48:48"},"nativeSrc":"1390:48:48","nodeType":"YulExpressionStatement","src":"1390:48:48"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:4:48","nodeType":"YulLiteral","src":"1499:4:48","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1505:11:48","nodeType":"YulIdentifier","src":"1505:11:48"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:48","nodeType":"YulIdentifier","src":"1492:6:48"},"nativeSrc":"1492:25:48","nodeType":"YulFunctionCall","src":"1492:25:48"},"nativeSrc":"1492:25:48","nodeType":"YulExpressionStatement","src":"1492:25:48"},{"nativeSrc":"1571:31:48","nodeType":"YulAssignment","src":"1571:31:48","value":{"arguments":[{"kind":"number","nativeSrc":"1591:4:48","nodeType":"YulLiteral","src":"1591:4:48","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1597:4:48","nodeType":"YulLiteral","src":"1597:4:48","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1581:9:48","nodeType":"YulIdentifier","src":"1581:9:48"},"nativeSrc":"1581:21:48","nodeType":"YulFunctionCall","src":"1581:21:48"},"variableNames":[{"name":"digest","nativeSrc":"1571:6:48","nodeType":"YulIdentifier","src":"1571:6:48"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":52579,"isOffset":false,"isSlot":false,"src":"1571:6:48","valueSize":1},{"declaration":52576,"isOffset":false,"isSlot":false,"src":"1505:11:48","valueSize":1}],"id":52581,"nodeType":"InlineAssembly","src":"1367:309:48"}]},"documentation":{"id":52574,"nodeType":"StructuredDocumentation","src":"552:665:48","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:48","parameters":{"id":52577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52576,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:48","nodeType":"VariableDeclaration","scope":52583,"src":"1254:19:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:48"},"returnParameters":{"id":52580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52579,"mutability":"mutable","name":"digest","nameLocation":"1306:6:48","nodeType":"VariableDeclaration","scope":52583,"src":"1298:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:48"},"scope":52642,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":52609,"nodeType":"FunctionDefinition","src":"2148:229:48","nodes":[],"body":{"id":52608,"nodeType":"Block","src":"2234:143:48","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":52595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:32:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":52600,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52586,"src":"2343:7:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":52601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2351:6:48","memberName":"length","nodeType":"MemberAccess","src":"2343:14:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":52598,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52220,"src":"2326:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$52220_$","typeString":"type(library Strings)"}},"id":52599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2334:8:48","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":52033,"src":"2326:16:48","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":52602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:32:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":52597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2320:5:48","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":52596,"name":"bytes","nodeType":"ElementaryTypeName","src":"2320:5:48","typeDescriptions":{}}},"id":52603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:39:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":52604,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52586,"src":"2361:7:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":52593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:5:48","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":52592,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:48","typeDescriptions":{}}},"id":52594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:48","memberName":"concat","nodeType":"MemberAccess","src":"2273:12:48","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":52605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:96:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":52591,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2263:9:48","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":52606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:107:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":52590,"id":52607,"nodeType":"Return","src":"2244:126:48"}]},"documentation":{"id":52584,"nodeType":"StructuredDocumentation","src":"1688:455:48","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2157:22:48","parameters":{"id":52587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52586,"mutability":"mutable","name":"message","nameLocation":"2193:7:48","nodeType":"VariableDeclaration","scope":52609,"src":"2180:20:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":52585,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2179:22:48"},"returnParameters":{"id":52590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52609,"src":"2225:7:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:9:48"},"scope":52642,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":52629,"nodeType":"FunctionDefinition","src":"2720:191:48","nodes":[],"body":{"id":52628,"nodeType":"Block","src":"2831:80:48","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":52622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2875:10:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":52623,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52612,"src":"2887:9:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":52624,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52614,"src":"2898:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":52620,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2858:3:48","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":52621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2862:12:48","memberName":"encodePacked","nodeType":"MemberAccess","src":"2858:16:48","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":52625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:45:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":52619,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2848:9:48","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":52626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:56:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":52618,"id":52627,"nodeType":"Return","src":"2841:63:48"}]},"documentation":{"id":52610,"nodeType":"StructuredDocumentation","src":"2383:332:48","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2729:31:48","parameters":{"id":52615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52612,"mutability":"mutable","name":"validator","nameLocation":"2769:9:48","nodeType":"VariableDeclaration","scope":52629,"src":"2761:17:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52611,"name":"address","nodeType":"ElementaryTypeName","src":"2761:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52614,"mutability":"mutable","name":"data","nameLocation":"2793:4:48","nodeType":"VariableDeclaration","scope":52629,"src":"2780:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":52613,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2760:38:48"},"returnParameters":{"id":52618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52629,"src":"2822:7:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2822:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2821:9:48"},"scope":52642,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":52641,"nodeType":"FunctionDefinition","src":"3353:401:48","nodes":[],"body":{"id":52640,"nodeType":"Block","src":"3462:292:48","nodes":[],"statements":[{"AST":{"nativeSrc":"3524:224:48","nodeType":"YulBlock","src":"3524:224:48","statements":[{"nativeSrc":"3538:22:48","nodeType":"YulVariableDeclaration","src":"3538:22:48","value":{"arguments":[{"kind":"number","nativeSrc":"3555:4:48","nodeType":"YulLiteral","src":"3555:4:48","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3549:5:48","nodeType":"YulIdentifier","src":"3549:5:48"},"nativeSrc":"3549:11:48","nodeType":"YulFunctionCall","src":"3549:11:48"},"variables":[{"name":"ptr","nativeSrc":"3542:3:48","nodeType":"YulTypedName","src":"3542:3:48","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3580:3:48","nodeType":"YulIdentifier","src":"3580:3:48"},{"hexValue":"1901","kind":"string","nativeSrc":"3585:10:48","nodeType":"YulLiteral","src":"3585:10:48","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3573:6:48","nodeType":"YulIdentifier","src":"3573:6:48"},"nativeSrc":"3573:23:48","nodeType":"YulFunctionCall","src":"3573:23:48"},"nativeSrc":"3573:23:48","nodeType":"YulExpressionStatement","src":"3573:23:48"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3620:3:48","nodeType":"YulIdentifier","src":"3620:3:48"},{"kind":"number","nativeSrc":"3625:4:48","nodeType":"YulLiteral","src":"3625:4:48","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3616:3:48","nodeType":"YulIdentifier","src":"3616:3:48"},"nativeSrc":"3616:14:48","nodeType":"YulFunctionCall","src":"3616:14:48"},{"name":"domainSeparator","nativeSrc":"3632:15:48","nodeType":"YulIdentifier","src":"3632:15:48"}],"functionName":{"name":"mstore","nativeSrc":"3609:6:48","nodeType":"YulIdentifier","src":"3609:6:48"},"nativeSrc":"3609:39:48","nodeType":"YulFunctionCall","src":"3609:39:48"},"nativeSrc":"3609:39:48","nodeType":"YulExpressionStatement","src":"3609:39:48"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3672:3:48","nodeType":"YulIdentifier","src":"3672:3:48"},{"kind":"number","nativeSrc":"3677:4:48","nodeType":"YulLiteral","src":"3677:4:48","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3668:3:48","nodeType":"YulIdentifier","src":"3668:3:48"},"nativeSrc":"3668:14:48","nodeType":"YulFunctionCall","src":"3668:14:48"},{"name":"structHash","nativeSrc":"3684:10:48","nodeType":"YulIdentifier","src":"3684:10:48"}],"functionName":{"name":"mstore","nativeSrc":"3661:6:48","nodeType":"YulIdentifier","src":"3661:6:48"},"nativeSrc":"3661:34:48","nodeType":"YulFunctionCall","src":"3661:34:48"},"nativeSrc":"3661:34:48","nodeType":"YulExpressionStatement","src":"3661:34:48"},{"nativeSrc":"3708:30:48","nodeType":"YulAssignment","src":"3708:30:48","value":{"arguments":[{"name":"ptr","nativeSrc":"3728:3:48","nodeType":"YulIdentifier","src":"3728:3:48"},{"kind":"number","nativeSrc":"3733:4:48","nodeType":"YulLiteral","src":"3733:4:48","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3718:9:48","nodeType":"YulIdentifier","src":"3718:9:48"},"nativeSrc":"3718:20:48","nodeType":"YulFunctionCall","src":"3718:20:48"},"variableNames":[{"name":"digest","nativeSrc":"3708:6:48","nodeType":"YulIdentifier","src":"3708:6:48"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":52637,"isOffset":false,"isSlot":false,"src":"3708:6:48","valueSize":1},{"declaration":52632,"isOffset":false,"isSlot":false,"src":"3632:15:48","valueSize":1},{"declaration":52634,"isOffset":false,"isSlot":false,"src":"3684:10:48","valueSize":1}],"id":52639,"nodeType":"InlineAssembly","src":"3515:233:48"}]},"documentation":{"id":52630,"nodeType":"StructuredDocumentation","src":"2917:431:48","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3362:15:48","parameters":{"id":52635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52632,"mutability":"mutable","name":"domainSeparator","nameLocation":"3386:15:48","nodeType":"VariableDeclaration","scope":52641,"src":"3378:23:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":52634,"mutability":"mutable","name":"structHash","nameLocation":"3411:10:48","nodeType":"VariableDeclaration","scope":52641,"src":"3403:18:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3403:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:45:48"},"returnParameters":{"id":52638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52637,"mutability":"mutable","name":"digest","nameLocation":"3454:6:48","nodeType":"VariableDeclaration","scope":52641,"src":"3446:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3445:16:48"},"scope":52642,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":52573,"nodeType":"StructuredDocumentation","src":"190:330:48","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"linearizedBaseContracts":[52642],"name":"MessageHashUtils","nameLocation":"529:16:48","scope":52643,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":48}